import 'dart:async';
import 'package:intl/intl.dart';
import 'package:flutter/material.dart';
import 'package:projekakhirpam_124220134/JSON/users.dart';
import 'package:projekakhirpam_124220134/SQLite/database_helper.dart';
import 'package:projekakhirpam_124220134/componen/color.dart';
import 'package:projekakhirpam_124220134/views/Profile.dart';
import 'package:projekakhirpam_124220134/views/kesanpesan.dart';
import 'package:table_calendar/table_calendar.dart';

class Beranda extends StatefulWidget {
  final Users? profile;
  const Beranda({super.key,this.profile});
  
  @override
  State<Beranda> createState() => _berandaState();
}



class _berandaState extends State<Beranda> {
  
late Timer _timer;
  String _currentTime = '';
  String _selectedTimeZone = 'WIB'; // Default ke WIB

  @override
  void initState() {
    _focusedDay = DateTime.now();
    _firstDay = DateTime.now().subtract(const Duration(days: 1000));
    _lastDay = DateTime.now().add(const Duration(days: 1000));
    _selectedDay = DateTime.now();
    _calendarFormat = CalendarFormat.month;
    super.initState();
    _updateTime();
    _timer = Timer.periodic(Duration(seconds: 1), (timer) => _updateTime());
  }

  void _updateTime() {
    final now = DateTime.now().toUtc();
    int offset = 0;

    if (_selectedTimeZone == 'WIB') {
      offset = 7; // UTC+7
    } else if (_selectedTimeZone == 'WITA') {
      offset = 8; // UTC+8
    } else if (_selectedTimeZone == 'WIT') {
      offset = 9; // UTC+9
    } else if (_selectedTimeZone == 'LDN'){
      offset = 0;
    }

    final adjustedTime = now.add(Duration(hours: offset));
    setState(() {
      _currentTime = DateFormat('HH:mm:ss').format(adjustedTime);
    });
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }

  DateTime Today = DateTime.now();
  late DateTime _focusedDay;
  late DateTime _firstDay;
  late DateTime _lastDay;
  late DateTime _selectedDay;
  late CalendarFormat _calendarFormat;

  // Tambahkan fungsi logout
  final usrName = TextEditingController();
  final password = TextEditingController();

  bool isChecked = false;
  bool isLoginTrue = false;
  final db = DatabaseHelper();
  //Login Method
  //We will take the value of text fields using controllers in order to verify whether details are correct or not
  login()async{
    Users? usrDetails = await db.getUser(usrName.text);
    var res = await db.authenticate(Users(usrName: usrName.text, password: password.text));
    if(res == true){
      //If result is correct then go to profile or home
      if(!mounted)return;
      Navigator.push(context, MaterialPageRoute(builder: (context)=> Beranda(profile: usrDetails)));
    }else{
      //Otherwise show the error message
      setState(() {
        isLoginTrue = true;
      });
    }
  }

  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: primaryColor,
        title: Text("Kalender Kegiatan", style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),),
      ),

      //bottombar
      bottomNavigationBar: SizedBox(
        height: 80,
        child: Container(
          color: primaryColor,
          child: Row(
            children: [
              Expanded(
                  child: InkWell(
                onTap: () {
                  Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                          builder: (context) => Beranda()));
                },
                child: const Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    //icon home
                    Icon(
                      Icons.home,
                      color: Colors.white,
                    ),
                    Text(
                      'Homepage',
                      style: TextStyle(color: Colors.white),
                    )
                  ],
                ),
              )),
              Expanded(
                  child: InkWell(
                onTap: () {
                  showDialog(
                    context: context, 
                    builder: (context) => AlertDialog(
                      actions: [
                        TextButton(
                          onPressed: (){
                            Navigator.of(context).pop();
                          },
                          child: const Text('Close'),
                          )
                      ],
                      title: const Text('Kesan pesan & saran',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold),),
                      contentPadding: const EdgeInsets.all(20),
                      content: const Text('Menurut saya PAM ini memberikan kesan serba otodidak, dan hal itu membuat banyak mahasiswa yang tertantang untuk mengulik dan mencari informasi, termasuk saya. saya jadi lumayan menyukai ngoding walaupun dahulu saya ga suka ngoding. Saran saya mungkin bisa di buka kelas tambahan di luar jam kuliah pak, hehe',
                      textAlign: TextAlign.justify,),
                    ),
                    );
                },
                child: const Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.help_outline,
                      color: Colors.white,
                    ),
                    Text('Kesan Pesan', style: TextStyle(color: Colors.white))
                  ],
                ),
              )),
              Expanded(
                  child: InkWell(
                onTap: () {
                  Navigator.push(context, MaterialPageRoute(builder: (context)=> Profile(profile: widget.profile,)));
                },
                child: const Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.person,
                      color: Colors.white,
                    ),
                    Text('Profil', style: TextStyle(color: Colors.white))
                  ],
                ),
              )),
            ],
          ),
        ),
      ),

      //PROFIL LOGI
      body: 
      CustomScrollView(
        primary: false,
        slivers: [
          SliverPadding(
            padding: const EdgeInsets.all(10),
            sliver: SliverGrid.count(
                crossAxisSpacing: 10,
                mainAxisSpacing: 10,
                crossAxisCount: 1,
                children: [
                Container(
                child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text("$_currentTime (${_selectedTimeZone})", 
                    style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold,),),
                    
                    DropdownButton<String>(
                  value: _selectedTimeZone,
                  items: ['WIB', 'WITA', 'WIT', 'LDN']
                      .map((timezone) => DropdownMenuItem(
                            value: timezone,
                            child: Text(timezone),
                          ))
                      .toList(),
                  onChanged: (newValue) {
                    setState(() {
                      _selectedTimeZone = newValue!;
                      _updateTime(); // Perbarui waktu saat zona waktu berubah
                    });
                  },
                ),
                  ],
                ),
              ),
              // KALENDER
              Container(
                child: TableCalendar(
                  headerStyle: HeaderStyle(
                  formatButtonVisible: false, titleCentered: true),
                  calendarFormat: _calendarFormat,
                  onFormatChanged: (format) {
                    setState(() {
                      _calendarFormat = format;
                    });
                  },
                  focusedDay: _focusedDay,
                  firstDay: _firstDay,
                  lastDay: _lastDay,
                  onPageChanged: (focusedDay) {
                    setState(() {
                      _focusedDay = focusedDay;
                    });
                  },
                  selectedDayPredicate: (day) => isSameDay(day, _selectedDay),
                  onDaySelected: (selectedDay, focusedDay) {
                    setState(() {
                      _selectedDay = selectedDay;
                      _focusedDay = focusedDay;
                    });
                  },
                  calendarStyle: const CalendarStyle(
                    weekendTextStyle: TextStyle(
                      color: Colors.red,
                    ),
                    selectedDecoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.deepPurple,
                    ),
                  ),
                ),
              ),
              Padding(
                padding: EdgeInsets.only(top: 1),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Column(
                      children: [
                        Row(
                          children: [
                            Text(
                              "Libur Terdekat",
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 18),
                            ),
                          ],
                        ),
                        Container(
                          height: 150,
                          child:ListView.builder(
                            scrollDirection: Axis.horizontal,
                            itemCount: 8,
                            itemBuilder: (context,count){
                              return Container(
                                width: 65,
                                height: 65,
                                decoration: BoxDecoration(
                                  shape: BoxShape.circle,
                                  color: Colors.black
                                ),
                              );
                            }
                          )
                        ),
                      ],
                    ),
                    Column(
                      children: [
                        Row(
                          children: [
                            Text(
                              "Kegiatan Terdekat",
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 18),
                            ),
                          ],
                        ),
                        Container(
                          height: 150,
                          child:ListView.builder(
                            scrollDirection: Axis.vertical,
                            itemCount: 8,
                            itemBuilder: (context,count){
                              return Container(
                                width: 65,
                                height: 65,
                                decoration: BoxDecoration(
                                  shape: BoxShape.circle,
                                  color: Colors.black
                                ),
                              );
                            }
                          )
                        ),
                      ],
                    )
                  ],
                ),
              ),
              
                ],
                ),
          )
        ],
      ),
    );
  }
}
